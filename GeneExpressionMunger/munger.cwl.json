{
  "id": "https://cgc-api.sbgenomics.com/v2/apps/gauravCGC/gene-expression/gene-expression-munger/17/raw/",
  "class": "CommandLineTool",
  "label": "Gene Expression Munger",
  "description": "Gene Expression Munger is a tool built for processing Level 3 RNA-seq gene expression data from The Cancer Genome Atlas. It will produce two tables of gene expression data (per gene, or per case) as well as a metadata table. It is capable of processing any number of files as it will automatically create an index for the list of files you specify, and then use that index in the command line.\n\nThis code was produced by Gaurav Kaushik with contributions from Boysha Tijanic for the Seven Bridges + NIH BD2K Hackathon, which took place April 1st to 3rd, 2016.",
  "requirements": [
    {
      "fileDef": [
        {
          "filename": "munger.py",
          "fileContent": "\"\"\"\nusage: munger.py [-h] [-f FILES [FILES ...]] [-r INDEX_FILE] [-c] [-o OUTPUT_FILENAME]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -f FILES [FILES ...], --files FILES [FILES ...]\n                        TCGA Gene Expression TXT files\n  -c, --csv\n  -r FILE_INDEX         A file with input files, one each line. Merged with -f files.\n  -o OUTPUT_FILENAME, --output_filename OUTPUT_FILENAME\n\"\"\"\n\nimport pandas as pd\nimport argparse\nimport sys\n\n# To read TXT files:\n# df = pd.read_table(filename)\n# To read MAF files:\n# df = pd.read_table(filename, skiprows=1) # to skip the version row\n\ndef get_dataframe_list(args, data_fields=('gene', 'raw_counts')):\n\n    # GET A LIST OF DATAFRAMES\n    dfs, files = [], args['files'] or []\n    if args['file_index']:\n        with open(args['file_index']) as fp:\n            files.extend(fp.readlines())\n    files = sorted(filter(None, set([f.strip() for f in files])))\n    for f in files:\n        # Get only specific columns with usecols\n        df = pd.read_table(f, usecols=data_fields)\n        dfs.append(df)\n    return dfs, files # a list of dataframes\n\ndef get_metadata_tag(filename):\n    \"\"\" Gets a filename (without extension) from a provided path \"\"\"\n    UNCID = filename.split('/')[-1].split('.')[0]\n    TCGA = filename.split('/')[-1].split('.')[1]\n    return TCGA\n\ndef merge_texts(args):\n    # get the list of dataframes\n    dfs, filenames = get_dataframe_list(args)\n    # files_list = filenames\n    # get the filenames to later append the column name with the TCGA barcode\n    # filenames = args['files'] # need to get the INDEX\n    # rename the columns of the first df\n    print dfs\n    df = dfs[0].rename(columns={'raw_counts': 'raw_counts_' + get_metadata_tag(filenames[0])})\n    # enumerate over the list, merge, and rename columns\n    for i, frame in enumerate(dfs[1:], 2):\n        df = df.merge(frame, on='gene').rename(columns={'raw_counts':'raw_counts_' + get_metadata_tag(filenames[i-1])})\n    return df\n\ndef get_csv(args, df, filename='GEX_dataframe.csv', header_opt=False, index_opt=False):\n    # if csv is true and an output filename is given, rename\n    # there is a default filename, so it should pass if --csv is True\n    if args['csv'] and args['output_filename']:\n        return df.to_csv(path_or_buf=filename, header=header_opt, index=index_opt)\n\ndef get_transpose(df):\n    df_transpose = df.transpose()\n    df_transpose = df_transpose.rename(index = {'gene':'case'})\n    return df_transpose\n\ndef main(args):\n    df = merge_texts(args)\n    get_csv(args, df, filename=str(args['output_filename']) + '_by_gene.csv', header_opt=True)\n    if args['transpose']:\n        get_csv(args, get_transpose(df), filename=str(args['output_filename']) + '_by_case.csv', header_opt=False, index_opt=True)\n    return df\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-f\", \"--files\", help=\"TCGA Gene Expression TXT files\", nargs=\"+\")\n    parser.add_argument(\"-c\", \"--csv\", action=\"store_true\", default=False)\n    parser.add_argument(\"-t\", \"--transpose\", action=\"store_true\", default=False)\n    parser.add_argument(\"-o\", \"--output_filename\", type=str, default=\"GEX_dataframe\")\n    parser.add_argument(\"-r\", \"--file_index\", type=str, default=None)\n\n    args = parser.parse_args()\n    args = vars(args)\n    if not args['files'] and not args['file_index']:\n        parser.print_help()\n        sys.exit(0)\n\n    df = main(args)"
        },
        {
          "filename": {
            "script": "// Metadata CSV\n$job.inputs.output_filename.replace(/.*\\/|\\.[^.]*$/g, '') + '_metadata.csv'\n// take processed output_filename and add appropriate suffix",
            "class": "Expression",
            "engine": "#cwl-js-engine"
          },
          "fileContent": {
            "script": "{\n  var keys = ['case_id', 'age_at_diagnosis', 'vital_status', 'days_to_death', 'gender', 'sample_type', 'primary_site', 'race', 'ethnicity', 'platform', 'investigation', 'case_uuid', 'sample_uuid', 'aliquot_uuid', 'disease_type', 'experimental_strategy', 'data_subtype'];\n  var records = [];\n  for (var i=0; i<$job.inputs.input_files.length; i++) {\n    r = []\n    var meta = $job.inputs.input_files[i].metadata;\n    for (var k=0; k<keys.length; k++) {\n      r.push(meta[keys[k]] || '')\n    }\n    records.push(r.join(','));\n  }\n  return '#' + keys.join(',') + '\\n' + records.join('\\n');\n}\n ",
            "class": "Expression",
            "engine": "#cwl-js-engine"
          }
        },
        {
          "filename": {
            "script": "// Index File\n$job.inputs.output_filename.replace(/.*\\/|\\.[^.]*$/g, '') + '_file.txt'\n// take processed output_filename and add appropriate suffix",
            "class": "Expression",
            "engine": "#cwl-js-engine"
          },
          "fileContent": {
            "script": "$job.inputs.input_files.map(function(f){return f.path.split('/').pop()}).join('\\n');\n// create an index file by taking the filename for each input file in the input array\n// an adding each in a new line (\\n)",
            "class": "Expression",
            "engine": "#cwl-js-engine"
          }
        }
      ],
      "class": "CreateFileRequirement"
    },
    {
      "requirements": [
        {
          "dockerPull": "rabix/js-engine",
          "class": "DockerRequirement"
        }
      ],
      "class": "ExpressionEngineRequirement",
      "id": "#cwl-js-engine"
    }
  ],
  "inputs": [
    {
      "description": "Input array of TCGA Level 3 gene expression quantification files",
      "sbg:altPrefix": "--files",
      "type": [
        {
          "name": "input_files",
          "type": "array",
          "items": "File"
        }
      ],
      "label": "Input Files",
      "sbg:fileTypes": "TXT",
      "id": "#input_files",
      "sbg:stageInput": "link"
    },
    {
      "description": "Used-defined name for the output files (added as a prefix)",
      "sbg:altPrefix": "--output_filename",
      "type": [
        "string"
      ],
      "label": "Output Filename",
      "inputBinding": {
        "position": 3,
        "separate": true,
        "valueFrom": {
          "script": "// take what the user gives and pop any extensions to prevent silly names like 'file.csv.csv'\n$job.inputs.output_filename.replace(/.*\\/|\\.[^.]*$/g, '')",
          "class": "Expression",
          "engine": "#cwl-js-engine"
        },
        "prefix": "-o",
        "sbg:cmdInclude": true
      },
      "sbg:toolDefaultValue": "<disease_type>",
      "id": "#output_filename"
    }
  ],
  "outputs": [
    {
      "description": "Genes by Cases (row by cols)",
      "type": [
        "null",
        "File"
      ],
      "outputBinding": {
        "sbg:inheritMetadataFrom": "#input_files",
        "sbg:metadata": {
          "num_input_files": "$job.inputs.input_files.length"
        },
        "glob": "*_gene.csv"
      },
      "label": "Gene Matrix",
      "fileTypes": "CSV",
      "id": "#gene"
    },
    {
      "description": "Transpose of Gene (rows are Cases)",
      "type": [
        "null",
        "File"
      ],
      "outputBinding": {
        "sbg:inheritMetadataFrom": "#input_files",
        "sbg:metadata": {
          "num_input_files": {
            "script": "$job.inputs.input_files.length",
            "class": "Expression",
            "engine": "#cwl-js-engine"
          }
        },
        "glob": "*_case.csv"
      },
      "label": "Case Matrix",
      "fileTypes": "CSV",
      "id": "#case"
    },
    {
      "description": "Metadata values for the input files",
      "type": [
        "null",
        "File"
      ],
      "outputBinding": {
        "sbg:metadata": {
          "num_input_files": {
            "script": "$job.inputs.input_files.length",
            "class": "Expression",
            "engine": "#cwl-js-engine"
          }
        },
        "glob": {
          "script": "$job.inputs.output_filename.replace(/.*\\/|\\.[^.]*$/g, '') + '_metadata.csv'",
          "class": "Expression",
          "engine": "#cwl-js-engine"
        }
      },
      "label": "Metadata Matrix",
      "fileTypes": "CSV",
      "id": "#metadata"
    },
    {
      "description": "A file containing a list of the files used in this execution",
      "type": [
        "null",
        "File"
      ],
      "outputBinding": {
        "sbg:inheritMetadataFrom": "#input_files",
        "sbg:metadata": {
          "num_input_files": {
            "script": "$job.inputs.input_files.length",
            "class": "Expression",
            "engine": "#cwl-js-engine"
          }
        },
        "glob": {
          "script": "$job.inputs.output_filename.replace(/.*\\/|\\.[^.]*$/g, '') + '_file.txt'",
          "class": "Expression",
          "engine": "#cwl-js-engine"
        }
      },
      "label": "Index File",
      "fileTypes": "TXT",
      "id": "#index"
    }
  ],
  "hints": [
    {
      "value": 1,
      "class": "sbg:CPURequirement"
    },
    {
      "value": 1000,
      "class": "sbg:MemRequirement"
    },
    {
      "dockerPull": "rfranklin/pythondev",
      "class": "DockerRequirement",
      "dockerImageId": ""
    }
  ],
  "baseCommand": [
    "python",
    "munger.py"
  ],
  "stdin": "",
  "stdout": "",
  "successCodes": [],
  "temporaryFailCodes": [],
  "arguments": [
    {
      "position": 1,
      "separate": false,
      "valueFrom": "-c",
      "prefix": ""
    },
    {
      "position": 2,
      "separate": false,
      "valueFrom": "-t"
    },
    {
      "separate": true,
      "valueFrom": {
        "script": "$job.inputs.output_filename.replace(/.*\\/|\\.[^.]*$/g, '') + '_file.txt'",
        "class": "Expression",
        "engine": "#cwl-js-engine"
      },
      "prefix": "-r"
    }
  ],
  "sbg:revision": 0,
  "sbg:modifiedBy": "gauravCGC",
  "sbg:image_url": null,
  "sbg:toolAuthor": "Gaurav Kaushik & Boysha Tijanic/Seven Bridges",
  "sbg:cmdPreview": "python munger.py -r tcga_file.txt -c -t -o tcga",
  "sbg:createdBy": "gauravCGC",
  "sbg:toolkitVersion": "1.0",
  "sbg:categories": [
    "DataScience",
    "TCGA"
  ],
  "sbg:createdOn": 1459127745,
  "sbg:job": {
    "inputs": {
      "input_files": [
        {
          "path": "/path/to/input_files-1.txt",
          "metadata": {
            "case_id": "TCGA-CM-4746",
            "age_at_diagnosis": "61",
            "race": "BLACK OR AFRICAN AMERICAN"
          },
          "class": "File",
          "size": 0,
          "secondaryFiles": []
        },
        {
          "path": "/path/to/input_files-2.txt",
          "metadata": {
            "case_id": "TCGA-CM-1415",
            "age_at_diagnosis": "41",
            "ethnicity": "BLACK"
          },
          "class": "File",
          "size": 0,
          "secondaryFiles": []
        },
        {
          "path": "/path/to/input_files-3.txt",
          "metadata": {
            "case_id": "TCGA-AHSOAD",
            "age_at_diagnosis": "89"
          },
          "size": 0,
          "secondaryFiles": []
        }
      ],
      "output_filename": "tcga.csv"
    },
    "allocatedResources": {
      "cpu": 1,
      "mem": 1000
    }
  },
  "sbg:toolkit": "DataScience",
  "sbg:sbgMaintained": false,
  "sbg:license": "MIT License",
  "sbg:validationErrors": []
}